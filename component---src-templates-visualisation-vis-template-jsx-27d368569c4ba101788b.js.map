{"version":3,"sources":["webpack://datavizhub-tuos/./src/templates/visualisation/visTemplate.jsx"],"names":["allMdx","data","pageContext","allMDX","nextPageRef","useRef","i","edges","length","push","Math","floor","random","currentMDXs","loadMoreVisualisation"],"mappings":"6KAyBA,UAnBoB,SAAC,GAInB,IAJuD,IAA5BA,EAA2B,EAAlCC,KAAOD,OAASE,EAAkB,EAAlBA,YAC9BC,EAAS,GACTC,GAAcC,cAEZC,EAAI,EAAGA,EAAIN,EAAOO,MAAMC,SAAUF,EACxCH,EAAOM,KAAKT,EAAOO,MAAMD,IACzBH,EAAOM,KAAKT,EAAOO,MAAMG,KAAKC,MAAMD,KAAKE,SAAUZ,EAAOO,MAAMC,UAChEL,EAAOM,KAAKT,EAAOO,MAAMG,KAAKC,MAAMD,KAAKE,SAAUZ,EAAOO,MAAMC,UAChEL,EAAOM,KAAKT,EAAOO,MAAMG,KAAKC,MAAMD,KAAKE,SAAUZ,EAAOO,MAAMC,UAChEL,EAAOM,KAAKT,EAAOO,MAAMG,KAAKC,MAAMD,KAAKE,SAAUZ,EAAOO,MAAMC,UAGlE,IAAMK,GAAcC,OAAsBX,EAAQC,GAElD,OACE,QAAC,IAAD,CAAWS,YAAaA,EAAaT,YAAaA,EAAaF,YAAaA","file":"component---src-templates-visualisation-vis-template-jsx-27d368569c4ba101788b.js","sourcesContent":["import React, { useRef } from \"react\"\r\nimport { graphql } from \"gatsby\"\r\nimport PropTypes from \"prop-types\"\r\nimport { loadMoreVisualisation } from \"../../utils/hooks/loadMoreVisualisation\"\r\nimport VisLayout from \"../../components/visualisation/visLayout\"\r\n\r\nconst visTemplate = ({data: {allMdx}, pageContext }) => {\r\n  const allMDX = [];\r\n  const nextPageRef = useRef();\r\n\r\n  for(let i = 0; i < allMdx.edges.length; ++i){\r\n    allMDX.push(allMdx.edges[i]);\r\n    allMDX.push(allMdx.edges[Math.floor(Math.random() *allMdx.edges.length)]);\r\n    allMDX.push(allMdx.edges[Math.floor(Math.random() *allMdx.edges.length)]);\r\n    allMDX.push(allMdx.edges[Math.floor(Math.random() *allMdx.edges.length)]);\r\n    allMDX.push(allMdx.edges[Math.floor(Math.random() *allMdx.edges.length)]);\r\n  }\r\n\r\n  const currentMDXs = loadMoreVisualisation(allMDX, nextPageRef);\r\n\r\n  return(\r\n    <VisLayout currentMDXs={currentMDXs} nextPageRef={nextPageRef} pageContext={pageContext} />\r\n  )\r\n}\r\n\r\nexport default visTemplate\r\n\r\nvisTemplate.propTypes = {\r\n  data: PropTypes.any,\r\n}\r\n\r\n\r\nexport const query = graphql`\r\n\tquery visualisationList {\r\n\t\tallMdx(\r\n\t\t\tfilter: { frontmatter: { type: { eq: \"visualisation\" } } }\r\n\t\t\tsort: { fields: [frontmatter___date], order: DESC }\r\n\t\t) {\r\n      edges {\r\n        node {\r\n          id\r\n          frontmatter {\r\n            ...MdxFrontmatter\r\n            rowSpan\r\n            columnSpan\r\n          }\r\n          fields {\r\n            ...MdxFields\r\n          }\r\n        }\r\n      }\r\n\t\t}\r\n\t}\r\n`"],"sourceRoot":""}